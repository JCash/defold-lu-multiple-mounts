function init(self)
	--msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })

	self.resources_pending = 0 -- <1>
	--msg.post("#", "attempt_load_resources")

	print("Live Update Cache is located here: " .. sys.get_save_file("", ""))
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		print("Touch!")
	end
end

-- This function is called whenever we have tried to store a downloaded resource
-- necessary for our collection proxy to load.
local function resource_store_response(self, hexdigest, status)
	if status == true then
		-- Successfully loaded resource
		print("Resource data stored: " .. hexdigest)

		-- One less resource to go...
		self.resources_pending = self.resources_pending - 1

		-- That was all of them, time to load the proxied collection.
		if self.resources_pending == 0 then
			msg.post("#proxy", "load") -- <8>
		end
	else
		-- ERROR! Failed to store the data!
		print("Failed to store resource data: " .. hexdigest)
	end
end

local manifest_errors = {
	[resource.LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH] = "LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH",
	[resource.LIVEUPDATE_ENGINE_VERSION_MISMATCH] = "LIVEUPDATE_ENGINE_VERSION_MISMATCH",
	[resource.LIVEUPDATE_FORMAT_ERROR] = "LIVEUPDATE_FORMAT_ERROR",
	[resource.LIVEUPDATE_INVALID_RESOURCE] = "LIVEUPDATE_INVALID_RESOURCE",
	[resource.LIVEUPDATE_SCHEME_MISMATCH] = "LIVEUPDATE_SCHEME_MISMATCH",
	[resource.LIVEUPDATE_SIGNATURE_MISMATCH] = "LIVEUPDATE_SIGNATURE_MISMATCH",
	[resource.LIVEUPDATE_VERSION_MISMATCH] = "LIVEUPDATE_VERSION_MISMATCH",
}

local function store_manifest_cb(self, status)
	if status == resource.LIVEUPDATE_OK then
		print("Successfully stored manifest!")
	else
		print("Failed to store manifest, status: ", manifest_errors[status])
	end
end

function on_message(self, message_id, message, sender)
	local base_url = "http://localhost:8000/resources/" -- <5>
	--local base_url = "http://192.168.10.212:8000" -- <5>

	print("MESSAGE", message_id)
	if message_id == hash('load_level') then
		local level = message.name
		local proxy = '#' .. level

		print("Loading", proxy)
		local missing_resources = collectionproxy.missing_resources(proxy)
		if #missing_resources > 0 then
			msg.post("#", "download_zip", { level = level, proxy = proxy })
		else
			msg.post(proxy, "load")
		end
		
	elseif message_id == hash("attempt_load_resources") then
		local missing_resources = collectionproxy.missing_resources("#proxy") -- <2>

		-- initiate a download request for each of the missing resources that has not yet been tried.
		for _,resource_hash in ipairs(missing_resources) do
			msg.post("#", "attempt_download", { resource_hash = resource_hash})
		end

		self.resources_pending = #missing_resources -- <3>

		-- if we're running from editor all resources are there from the start.
		if self.resources_pending == 0 then
			msg.post("#proxy", "load")
		end
	elseif message_id == hash("download_zip") then

		--[[
		http.request(base_url .. message.resource_hash, "GET", function(self, id, response)
			if response.status == 200 or response.status == 304 then
				-- mount the zip file
				liveupdate.mount_archive

				-- todo: check if we can safely load the collection, otherwise we need to set 
				-- a "reboot necessary" flag somewhere
				--load_level(proxy)
			else
				-- ERROR! Failed to download resource!
				print("Failed to download resource: " .. message.resource_hash .. " from " .. base_url)
			end
		end)
		--]]

	elseif message_id == hash("proxy_loaded") then
		msg.post(sender, "init")
		msg.post(sender, "enable")
	end
end
